<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.sxhome.club</id>
    <title>林·楠Blog</title>
    <updated>2020-10-12T15:32:52.992Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.sxhome.club"/>
    <link rel="self" href="https://blog.sxhome.club/atom.xml"/>
    <logo>https://blog.sxhome.club/images/avatar.png</logo>
    <icon>https://blog.sxhome.club/favicon.ico</icon>
    <rights>All rights reserved 2020, 林·楠Blog</rights>
    <entry>
        <title type="html"><![CDATA[2020.10.12 23:00 离考研越来越近了]]></title>
        <id>https://blog.sxhome.club/post/20201012-2300-chi-kao-yan-yue-lai-yue-jin-liao/</id>
        <link href="https://blog.sxhome.club/post/20201012-2300-chi-kao-yan-yue-lai-yue-jin-liao/">
        </link>
        <updated>2020-10-12T15:00:17.000Z</updated>
        <content type="html"><![CDATA[<pre><code>    今天也是保研公布结果的一天，空间、朋友圈里无非就是各种秀自己保研的人，为了这一刻他们应该等了许久吧。放下羡慕与嫉妒不谈吧，当初也是自己选择的考研这条路，看着每天在一起上课跟自己差不多甚至一些地方并不如自己的人能够保上研，而那学校却还是自己曾经心心念念的上海大学，心里也是百般滋味说不出，毕竟自己选择考研最终只是报考了东华大学，也并没有抬高学校层次。
    我比别人差在哪呢？保研这条路也不是很容易，但自己也不是够不到，只能怪自己没有对保研有充分的认识，自己想当然了。总结起来就是几条：自以为保研非常难并且保不到好学校、自以为保研只能保学硕、自以为自己离保研差了很远。看吧这是自己想当然的结果，最终吃亏的还是自己，回想大学里很多时候都是自己想当然，错过了一些奖学金等等，到如今自己才真正吸取到教训，“没有调查，没有发言权”，毛主席的名言绝非说说而已。
    细算算，保研的人从现在起到明年九月份，近一年的时间，几乎没什么压力了，也不用找工作，说句不上进的话，就是等毕业。选择了考研，就是从去年这时开始一直到现在1年的时间都是在备考，还有不到3个月考试，而未来算上复试还有近6个月的时间才能最终确定自己能不能读研究生，不过这还是在初试通过的理想情况下，可我还没考呢。想想这一路也真的不容易啊，今年由于疫情也是特殊的一年，大家都不容易，想起暑期南京集训的时候，正赶上身体出了状况，当时想放弃的心都有了。看起来考研是要多吃不少苦，不过这也是因果效应吧，想成功总要历经磨砺的，保研人那都是在本科期间努力来的结果，至于我们这样不够努力的，最终也只有考研这条路可选，总得付出点什么的。
    也算是考了一辈子的试了，确实，聪明的人早已为保研早做打算了，能不考试为什么要去应试呢？在这样的体制下还是有很多选择的，既然选择了考，那只能在这最后的时候咬牙坚持下去了。曾经以为考研是多么的“神圣”，以为还是高考呢，现如今才知：那只是留给不够勤奋、不够努力的人的一条后路罢了。</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内存布局与启动流程]]></title>
        <id>https://blog.sxhome.club/post/nei-cun-bu-ju-yu-qi-dong-liu-cheng/</id>
        <link href="https://blog.sxhome.club/post/nei-cun-bu-ju-yu-qi-dong-liu-cheng/">
        </link>
        <updated>2020-10-10T13:59:52.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://blog.sxhome.club/post-images/1602376828572.jpeg" alt="" loading="lazy"><br>
如上图所示，一般除了<code>0xA0000</code>到<code>0xFFFFF</code>(640K到1M共384K)和<code>0xFFFE0000</code>到<code>0xFFFFFFF</code>(4G最后的64K)以外的内存都可用作系统内存。<code>[0x0, 0xA0000)</code>的<code>640K</code>内存用于存放内核代码和数据，<code>640K到1M即[0xA0000, 0x100000)</code>保留用作图中的作用。由于Linux除了16位实模式以外不使用BIOS功能，也不使用BIOS中断向量表，因此存放在0x0到0x500的BIOS数据会被Linux系统模块覆盖。<br>
<img src="https://blog.sxhome.club/post-images/1602376521161.jpeg" alt="" loading="lazy"><br>
如上图所示为Linux的引导扇区代码执行流程：<br>
1、首先CPU在上电后会将<code>0号扇区</code>的512字节读到内存<code>0x7C00</code>开始的内存中，然后跳转到<code>0x7C00</code>执行引导代码（即<code>bootsect.S</code>）<br>
2、<code>bootsect.S</code>会将自身重新拷贝至<code>0x90000</code>内存，然后跳到<code>0x90000</code>开始段中对应的位置继续执行。接着将1号扇区开始的<code>4个扇区</code>的代码（即<code>setup.S</code>）拷贝到<code>0x90200</code>处，将系统模块拷贝至<code>0x10000</code>内存处，然后跳到0x90200执行setup.S代码。<br>
3、前面为什么要拷贝至<code>0x90000</code>呢？因为<code>Linux0.12</code>系统模块默认不超过512K，为了给其留足空间，bootsect.S从0x90000开始，这样从0x10000到0x90000刚好512K内存，足够后面拷贝系统模块。<br>
4、<code>setup.S</code>会为系统<code>设置好必要的硬件参数</code>，然后将0x10000处开始的系统模块代码重新拷贝至0x0内存处，接着设置好临时gdt和idt表、<code>打开保护模式</code>，最后跳往0x0处开始执行<code>32位</code>系统模块头部代码（即<code>head.s</code>）。<br>
5、这里又要问，为什么一开始不直接拷贝到0地址处，而是先拷贝到0x10000后再拷贝到0x0，这是因为在setup.S中设置系统所需的必要的硬件参数需要调用BIOS中断获取，而BIOS中断向量表就存放在0地址处，因此这时候还不能直接拷贝系统模块至0地址，只有等参数初始化完成后才能拷贝到0地址处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[16位x86汇编：int $0x10 显示中断]]></title>
        <id>https://blog.sxhome.club/post/16-wei-x86-hui-bian-int-dollar0x10/</id>
        <link href="https://blog.sxhome.club/post/16-wei-x86-hui-bian-int-dollar0x10/">
        </link>
        <updated>2020-10-03T15:39:55.000Z</updated>
        <content type="html"><![CDATA[<p><code>int $0x10</code>是BIOS显示功能的中断<br>
<code>功能号ah=0x03:</code>读光标位置<code>(用于设置参数寄存器为当前光标位置)</code><br>
参数：<code>bh = 页号</code><br>
返回：<br>
<code>ch:cl</code>=扫描开始线:扫描结束线<br>
<code>dh:dl</code>=行号<code>(0x00 顶端)</code>:列号<code>(0x00 最左边)</code></p>
<p><code>功能号ah=0x13:</code>显示字符串<br>
参数：<br>
<code>ah:al</code>=功能号:放置光标的方式及规定属性.0x01表示使用bl中的属性值,光标停在字符串结尾处<br>
<code>es:bp</code>=此寄存器对指向要显示的字符串起始位置处<br>
<code>cx</code>=显示的字符串字符数<br>
<code>bh:bl</code>=显示页面号: 字符属性<br>
<code>dh:dl</code>=行号:列号<br>
<code>字符属性: (0x00白色, 0x0a绿色, 0x0b水蓝, 0x0c红色, 0x0d紫色, 0x0e黄色)</code></p>
<pre><code class="language-c">print_nl:  # 打印换行
	movw $0xe0d,%ax  # CR
	int	$0x10
	movb $0xa,%al  # LF
	int $0x10
	ret
print:
	push %bp  # 保存bp
	movw %sp,%bp # 平衡堆栈
	movb $0x03,%ah
	xorb	%bh,%bh
	int	$0x10  # 读光标位置到各参数寄存器，这样后面就会接在光标后继续打印
	movw 4(%bp), %bp  # 第一个压栈的参数为字符的地址
	movw $0x10,%cx  # 字符数
	movw $0x1301,%ax  # 0x13显示字符功能号 0x01使用bl属性值，光标停在结尾处
	movw $0xc,%bx  # 0x00页面 0x0c属性(红色)
	int $0x10
	pop %bp  # 恢复bp
	ret
# 打印十六进制数，参数存在 ax 中
print_hex:
	mov $4,%cx
	mov %ax,%dx
print_digit:
	rol $4,%dx
	mov $0xe,%ah
	mov %dl,%al
	and $0xf,%al
	add $0x30,%al
	cmp $0x39,%al
	jbe good_digit
	add $0x41-0x30-0xa,%al
good_digit:
	int $0x10
	loop print_digit
	ret
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[16位x86汇编：int $0x13 读磁盘中断]]></title>
        <id>https://blog.sxhome.club/post/16-wei-hui-bian-int-0x13/</id>
        <link href="https://blog.sxhome.club/post/16-wei-hui-bian-int-0x13/">
        </link>
        <updated>2020-10-03T13:33:40.000Z</updated>
        <content type="html"><![CDATA[<p><code>int 0x13</code>是BIOS读磁盘中断<br>
<code>参数：</code><br>
<code>dh:dl</code>=磁头号:驱动器号<code>(硬盘则位7要置1)</code><br>
<code>ch:cl</code>=磁道(柱面号)的低8位:开始扇区(0-5)磁道号高2位(位6-7)  <code>注意扇区号从1号开始</code><br>
<code>es:bx</code>=读至的内存地址<code>(如果出错则CF标志置位jnc指令可判断,ah中是出错码)</code><br>
<code>ah:al</code>=服务号 <code>(0x02号服务为读磁盘扇区到内存)</code>:扇区数</p>
<pre><code class="language-c">ok_load_setup:
    xorw %dx, %dx			# drive 0, head 0  (dx=磁头号:驱动器号)
    movw $0x02,%cx  	 # sector 2, track 0 (cx=柱面号:开始扇区)
    movw #0x0200,%bx   # (es:bx=内存地址=0x90200)
    movw %ax,#0x0200+len	# 2号服务为读磁盘,
    int $0x13			          # BIOS读磁盘中断
    jnc ok_load_setup		# jnc表示cf置位则跳转，cf置位则读磁盘失败，重读
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[16位x86汇编：循环拷贝]]></title>
        <id>https://blog.sxhome.club/post/16-wei-hui-bian-xun-huan-kao-bei/</id>
        <link href="https://blog.sxhome.club/post/16-wei-hui-bian-xun-huan-kao-bei/">
        </link>
        <updated>2020-10-03T13:11:26.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-c">movw $0x7c0,%ax
movw %ax,%ds
movw $0x9000,%ax
movw %ax,%es
movw $256,%cx  # 256字=512字节
sub %si,%si
sub %di,%di
rep
movsw
ljmp $0x9000,$offset
</code></pre>
<p>从[ds:si]拷贝%cx字（1字=2字节）到[es:di]</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一篇博客]]></title>
        <id>https://blog.sxhome.club/post/di-yi-pian-bo-ke/</id>
        <link href="https://blog.sxhome.club/post/di-yi-pian-bo-ke/">
        </link>
        <updated>2020-09-24T10:21:35.000Z</updated>
        <content type="html"><![CDATA[<p>今天是我的生日，也是博客建站的第一天，愿以后和宝贝能够每天都在一起😊</p>
]]></content>
    </entry>
</feed>